generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    agents        Agent[]    // User can have multiple agents
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// AgentGPT Core Models
model Agent {
    id          String   @id @default(cuid())
    userId      String   // Foreign key to User
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    name        String   // Custom name for the agent
    goal        String   // The main objective for the agent
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    tasks       Task[]   // An agent can have multiple tasks
}

model Task {
    id          String   @id @default(cuid())
    agentId     String   // Foreign key to Agent
    agent       Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
    description String   // The task description (what to do)
    status      TaskStatus @default(PENDING) // e.g., PENDING, IN_PROGRESS, COMPLETED, FAILED
    result      String?  // The outcome or result of the task
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

enum TaskStatus {
    PENDING
    IN_PROGRESS
    COMPLETED
    FAILED
}
